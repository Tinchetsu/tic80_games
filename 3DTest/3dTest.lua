
local insert,remove,sqrt,max,min,flr,cos,sin,rnd,abs=table.insert,table.remove,math.sqrt,math.max,math.min,math.floor,
math.cos,math.sin,math.random,math.abs


st={} --matrix stack
rlist={} --final render tri list

tris=0
scale=30
center_x=120
center_y=68

--clone table
function clone(t)
	local r={}
	for k,v in pairs(t)do r[k]=v end
	return r
end

--vector math
function vl(v)return sqrt(v[1]*v[1]+v[2]*v[2]+v[3]*v[3])end
function vls(v)return v[1]*v[1]+v[2]*v[2]+v[3]*v[3]end
function vn(v)local l = vl(v)return {v[1]/l,v[2]/l,v[3]/l}end
function vc(v,w)return{v[2]*w[3]-v[3]*w[2], v[3]*w[1]-v[1]*w[3], v[1]*w[2]-v[2]*w[1]}end

--matrix ops
function mId()return{1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}end
function mm(m,n)
	local r={}
	r[1]=m[1]*n[1]+m[2]*n[5]+m[3]*n[9]+m[4]*n[13]
	r[2]=m[1]*n[2]+m[2]*n[6]+m[3]*n[10]+m[4]*n[14]
	r[3]=m[1]*n[3]+m[2]*n[7]+m[3]*n[11]+m[4]*n[15]
	r[4]=m[1]*n[4]+m[2]*n[8]+m[3]*n[12]+m[4]*n[16]
	r[5]=m[5]*n[1]+m[6]*n[5]+m[7]*n[9]+m[8]*n[13]
	r[6]=m[5]*n[2]+m[6]*n[6]+m[7]*n[10]+m[8]*n[14]
	r[7]=m[5]*n[3]+m[6]*n[7]+m[7]*n[11]+m[8]*n[15]
	r[8]=m[5]*n[4]+m[6]*n[8]+m[7]*n[12]+m[8]*n[16]
	r[9]=m[9]*n[1]+m[10]*n[5]+m[11]*n[9]+m[12]*n[13]
	r[10]=m[9]*n[2]+m[10]*n[6]+m[11]*n[10]+m[12]*n[14]
	r[11]=m[9]*n[3]+m[10]*n[7]+m[11]*n[11]+m[12]*n[15]
	r[12]=m[9]*n[4]+m[10]*n[8]+m[11]*n[12]+m[12]*n[16]
	r[13]=m[13]*n[1]+m[14]*n[5]+m[15]*n[9]+m[16]*n[13]
	r[14]=m[13]*n[2]+m[14]*n[6]+m[15]*n[10]+m[16]*n[14]
	r[15]=m[13]*n[3]+m[14]*n[7]+m[15]*n[11]+m[16]*n[15]
	r[16]=m[13]*n[4]+m[14]*n[8]+m[15]*n[12]+m[16]*n[16]
	return r
end

function ms(m,x,y,z)
	return mm(m,{x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1})
end

function mt(m,x,y,z)
	local r=clone(m)
	r[4]=m[1]*x+m[2]*y+m[3]*z+m[4]
	r[8]=m[5]*x+m[6]*y+m[7]*z+m[8]
	r[12]=m[9]*x+m[10]*y+m[11]*z+m[12]
	r[16]=m[13]*x+m[14]*y+m[15]*z+m[16]
	return r
end

function mr(m,a,x,y,z)
	local n,c,s=mId(),cos(a),sin(a)
	local t=1-c
	n[1]=c+x*x*t
	n[2]=z*s+x*y*t
	n[3]=-y*s+x*z*t
	n[5]=-z*s+x*y*t
	n[6]=c+y*y*t
	n[7]=x*s+y*z*t
	n[9]=y*s+x*z*t
	n[10]=-x*s+y*z*t
	n[11]=c+z*z*t
	return mm(m,n)
end

function mre(m,x,y,z)
	local n,a,b,c,d,e,f=mId(),cos(x),sin(x),cos(y),sin(y),cos(z),sin(z)
	local ad,bd=a*d,b*d
	n[1]=c*e
	n[2]=-c*f
	n[3]=d
	n[5]=bd*e+a*f
	n[6]=-bd*f+a*e
	n[7]=-b*c
	n[9]=-ad*e+b*f
	n[10]=ad*f+b*e
	n[11]=a*c
	return mm(m,n)
end

--matrix stack ops
function sInit()st={mId()}end
function sSet(m)st[#st]=m end
function sGet()return st[#st]end
function sPop() if #st>1 then remove(st)end end
function sPush() insert(st,clone(st[#st])) end
function sMul(m) sSet(mm(sGet(),m)) end
function sTr(x,y,z) sSet(mt(sGet(),x,y,z)) end
function sRot(a,x,y,z) sSet(mr(sGet(),a,x,y,z)) end
function sRotE(x,y,z) sSet(mre(sGet(),x,y,z)) end
function sScl(x,y,z) sSet(ms(sGet(),x,y,z)) end


function round2(num)
	return tonumber(string.format("%.2f", num))
end


function toN(s,a,b)
	return tonumber(s:sub(a,b),16)
end

function fixUV(u1,u2,u3)
	local a,b,c,s=clone(u1),clone(u2),clone(u3),0.05
	local minx,miny,maxx,maxy=min(a[1],b[1],c[1]),min(a[2],b[2],c[2]),max(a[1],b[1],c[1]),max(a[2],b[2],c[2])
	local f = function(u)
		if u[1]==minx then u[1]=u[1]+s end
		if u[2]==miny then u[2]=u[2]+s end
		if u[1]==maxx then u[1]=u[1]-s end
		if u[2]==maxy then u[2]=u[2]-s end
	end
	f(a)
	f(b)
	f(c)
	return a,b,c
end

function initModel(m)
	local len,s,uv=#m.ve//6,m.max/255,{}
	--parse vertices
	m.v={}
	for i=0,len-1 do
		local t,j={},i*6
		insert(t,toN(m.ve,j+1,j+2)*s-m.ox)--x
		insert(t,toN(m.ve,j+3,j+4)*s-m.oy)--y
		insert(t,toN(m.ve,j+5,j+6)*s-m.oz)--z
		insert(m.v,t)
	end
	--parse color faces
	if m.cf then
		m.c={}
		len=#m.cf//7
		for i=0,len-1 do
			local t,j={},i*7
			insert(t,toN(m.cf,j+1,j+2)+1)	--v1
			insert(t,toN(m.cf,j+3,j+4)+1)	--v2
			insert(t,toN(m.cf,j+5,j+6)+1)	--v3
			insert(t,toN(m.cf,j+7,j+7))		--color
			insert(m.c,t)
		end
	end
	--parse uv
	if m.uv then
		m.u={}
		len=#m.uv//4
		for i=0,len-1 do
			local t,j={},i*4
			insert(t,toN(m.uv,j+1,j+2))	--u
			insert(t,toN(m.uv,j+3,j+4))	--v
			insert(uv,t)
		end
	end
	--parse textured faces
	if m.tf then
		m.t={}
		len=#m.tf//12
		for i=0,len-1 do
			local t,j={},i*12
			insert(t,toN(m.tf,j+1,j+2)+1)	--v1
			insert(t,toN(m.tf,j+5,j+6)+1)	--v2
			insert(t,toN(m.tf,j+9,j+10)+1)	--v3

			local a,b,c=fixUV(uv[toN(m.tf,j+3,j+4)+1], uv[toN(m.tf,j+7,j+8)+1],uv[toN(m.tf,j+11,j+12)+1])

			--uv
			insert(t,a) 
			insert(t,b)
			insert(t,c)
			insert(m.t,t)
		end
	end
end

function transform(m,v)
	return {v[1]*m[1]+v[2]*m[2]+v[3]*m[3]+m[4],v[1]*m[5]+v[2]*m[6]+v[3]*m[7]+m[8],v[1]*m[9]+v[2]*m[10]+v[3]*m[11]+m[12]}
end

function proj(v)
	return {v[1]*scale/v[3]+center_x, v[2]*scale/v[3]+center_y,v[3]}
end


function project_radius(r,z)
	return r*scale/abs(z)
end


--send model to render queue
function queue(mo,ck)
	ck=ck or -1
	local m=sGet()
	local w={}

	for _,v in pairs(mo.v)do
		insert(w,proj(transform(m,v)))
	end
	--color faces
	if mo.c ~= nil then
		for _,f in pairs(mo.c) do
			local x1,y1,x2,y2,x3,y3=w[f[1]][1],w[f[1]][2],w[f[2]][1],w[f[2]][2],w[f[3]][1],w[f[3]][2]
			local _z=(w[f[1]][3]+w[f[2]][3]+w[f[3]][3])*0.3333
			--local _z = min(w[f[1]][3],w[f[2]][3],w[f[3]][3])
			if min(w[f[1]][3],w[f[2]][3],w[f[3]][3])>0
				and not ((x1<0 and x2<0 and x3<0) or (x1>240 and x2>240 and x3>240) or (y1<0 and y2<0 and y3<0) or (y1>136 and y2>136 and y3>136))
				and ((x2-x1)*(y3-y1)-(x3-x1)*(y2-y1))<0 --backface culling
			then
				insert(rlist,{1,_z,x1,y1,x2,y2,x3,y3,f[4]})
			end
		end
	end
	--textured faces
	if mo.t ~= nil then
		for _,f in pairs(mo.t) do
			local x1,y1,x2,y2,x3,y3=w[f[1]][1],w[f[1]][2],w[f[2]][1],w[f[2]][2],w[f[3]][1],w[f[3]][2]
			local _z=(w[f[1]][3]+w[f[2]][3]+w[f[3]][3])*0.3333
			if min(w[f[1]][3],w[f[2]][3],w[f[3]][3])>0
				and not ((x1<0 and x2<0 and x3<0) or (x1>240 and x2>240 and x3>240) or (y1<0 and y2<0 and y3<0) or (y1>136 and y2>136 and y3>136))
				and ((x2-x1)*(y3-y1)-(x3-x1)*(y2-y1))<0 --backface culling
			then
				insert(rlist,{2,_z,x1,y1,x2,y2,x3,y3,f[4][1],f[4][2],f[5][1],f[5][2],f[6][1],f[6][2],ck})
			end
		end
	end
end

function render()
	table.sort(rlist, function(a,b) return a[2]>b[2] end)
	for k,v in pairs(rlist) do
		if v[1]==1 then
			tri(v[3],v[4],v[5],v[6],v[7],v[8],v[9])
			tris=tris+1
		elseif v[1]==2 then
			textri(v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11],v[12],v[13],v[14],false,v[15])
			tris=tris+1
		end
	end
	rlist={}
end

function renderLines()
	local _y,_z1,_z2=0,-1,-50
	local m=sGet()
	for i=-25,25 do
		local p1=proj(transform(m,{i,_y,_z1}))
		local p2=proj(transform(m,{i,_y,_z2}))
		line(p1[1],p1[2],p2[1],p2[2],2)
	end
end

function traceM(m)
	s=""
	for k,v in pairs(m) do
		s = s..v.." "
	end
	trace(s)
end

function traceS()
	s=""
	for k,m in pairs(st) do
		s=s.."("
		for l,v in pairs(m) do
			s = s..v.." "
		end
		s=s..")\n"
	end
	trace(s)
end

initModel(model)
initModel(model2)
initModel(model3)
initModel(tree)
sInit()
--perspective hack
sScl(0.5,-0.5,-0.1)

function now() return time()/1000. end
frame,fps,last_frame,last_time,frame_time_last = 0,0,0,0,0

function FPS()
	frame = frame + 1
	local t = now()
	--frame_time_last=t
	if frame-last_frame == 60 then
		fps = round2(60/( t - last_time ))
		last_time = t
		last_frame = frame
	end
	print(fps,200,0,15)
end

local rot=-3.14 / 2
local rx=0
local moveSpeed=0.01

local printx=0
local printy=16

-- 0 , -0.6, -1.15

x=-0.25
y=-0.6
z=-1.15

pl={spr=81,x=100,y=110,flip=0,move=false,frames={81,82,81,80},frame=1,finc=0,shdw=true}

function move()
	local dir = 1

	if(btn(0)) then pl.y=pl.y-0.5 end
	if(btn(1)) then pl.y=pl.y+0.5 end
	if(btn(2)) then x=x+moveSpeed pl.flip=1 end
	if(btn(3)) then x=x-moveSpeed pl.flip=0 end

	if(btn(0) or btn(1) or btn(2) or btn(3))then
		pl.move=true
	else
		pl.move=false
		pl.finc=0
		pl.frame=1
		pl.spr=pl.frames[pl.frame]
	end
	
	if(x>-0.22)then 
		x=-0.22
		pl.move=false
	end

	if pl.move then
		pl.finc=pl.finc+1
		if(pl.finc>5) then
			pl.finc=0
			pl.frame=pl.frame+1
			if(pl.frame>#pl.frames)then pl.frame=1 end
			pl.spr=pl.frames[pl.frame]
		end
	end

	pl.shdw = not pl.shdw

	--if(btn(4)) then z=z+moveSpeed end
	--if(btn(5)) then z=z-moveSpeed end
end

function TIC()
	cls(0)
	tris=0
	--rot = rot + 0.01

	move()

	circ(150,10,10,15)

	--sPush(mt(sGet(),0,-1,0.0))
	sPush()
	sTr(x,y,z)
	queue(model)
	sPop()

	sPush()
	sTr(x+2.48,y,z)
	queue(model2)
	sPop()

	sPush()
	sTr(x,y,z-0.5)
	queue(model3)
	sPop()

	sPush()
	sTr(x+1,y+0.05,z-1.5)
	queue(tree,0)
	sPop()


	render()

	--draw player
	
	if(pl.shdw)then
		circ(pl.x+8,pl.y+14,4,3)
	end
	spr(pl.spr,pl.x,pl.y,0,2,pl.flip)
	--rx = rx + 0.01
	
	--textri(50,50,100,50,100,100,24,16,32,16,32,24)
	
	--FPS()
	--print(tris,0,0,15)
	--print("x:"..x,printx,printy,15)
	--print("y:"..y,printx,printy+8,15)
	--print("z:"..z,printx,printy+8*2,15)
	--print(tris,0,0,15)
	--print(#st,0,10,2)
end

-- <CODE1>
---------------
--Model data
---------------
model={
ox=1.5000,
oy=0.0000,
oz=2.3682,
max=3.1736,
ve="787D1D14006D50146D28286D3C00BE3C286D28146D00006D64146D14146D0000823C146D28006D3C006DFF008200286D64006D6400965000AA50006D6400826400BE5000826400AA50009600146D3C00AA0000BE5000BE3C008278146DFF001D14286D003C6D143C6D007D6D78286D147D6D50286D64286D787D6D787D6D3C0096FF00BE78006D78001D8C001D8C006D8C0082FF00007800008C00003F001D3F0000FF006D647D6D",
cf="150E147332E1F72E333232C070A32F2E2D3361F2E72520274040A1B7302F2C3300E3673235343152B0E725273740A302C3002C2D400292C42E322D332342D32F2D2C3331F31730362F7362E2F7041D0A7",
uv="50084800480830182810281848104008401038183010201818101818380038081808100010081010101850003810201040001800",
tf="01001901070206032004090509060F071908020305040B050B03030406050D09060A0C03100B020C130D13090B0A0D030C07090E010F171018111212151012111C1211101611181218101D112A1212102A111A121C101A110412080D261302142C02081510001E0827020806200621070F082206230721082407280737020100091519010603030A2004090620020F070203260A05040B03050A03040D090B16060A100B0817020C130902160B0A0C070618090E171011191811151017191211111014191611181016191D11121018192A111C1012191A11080D270C26132C021E0108151E0824072702200622022107220625022307240737022702"
}

model2={
ox=0.7992,
oy=0.0000,
oz=2.3682,
max=2.3682,
ve="1AA727A10093501A938635936B00FE6B3593861A93BC0093351A93A11A93BC00AE6B1A938600936B00930000AEBC35933500933500C95000E45000933500AE3500FF5000AE3500E45000C9BC1A936B00E4BC00FE5000FF6B00AE1A1A93A13593BC5093A15093BCA7931A3593A1A7935035933535931AA7931AA7936B00C90000FF1A00931A00270000270000930000AE1A000000000067002767000035A793",
cf="15140E72D303132B0A0732E2C2D3041B0A72F2B2E33032333150E2A70A2B2F3002C2B4002B2842D2C303302C3232E2B2C3040A1D724261F42434264",
uv="50084808480030182818281048104010400838183010201818181810380838001808100810001018101050003810201040001800",
tf
}

model3={
ox=2.7509,
oy=0.0000,
oz=3.2264,
max=5.8201,
ve="000000FF0000002300FF230000000EFF000E000044FF0044",
cf="010200101030210005013000405304070570406077"
}

tree={
ox=0.5245,
oy=0.0020,
oz=0.4242,
max=1.0491,
ve="36001E7F001C180067B400323600B0C900677F00CEB4009BC800B07F00B1E600674A009BC8001E3500677F00004A0032181867351867B418327F181CC818B0B4189B4A183236181E3618B04A189BC918677F18B17F18CEE61867C8181E7F1800FEFF6700FF67FE0067000067",
cf="090806A050807A010C03A01000EA09040BA050C0AA0B020DA0F0200A1C151BA141A15A1E1312A131716A181B19A1A1E12A101911A161011A071A05F01160FF031301F081C06A0D190BF001F0EA0A1408A091507F0C1D0AA021700A051203F0F110DF041002A0E1E0CA0B1B09F061804A090708A050A08A010E0CA010F00A090604A05030CA0B0402A0F0D02A1C1415A141D1AA1E1F13A131F17A181C1BA1A1D1EA101819A161710A07151AF011316F031213F08141CA0D1119F00171FA0A1D14A091B15F0C1E1DA021017A051A12F0F1611F041810A0E1F1EA0B191BF061C18A",
uv="6A19560456196A04",
tf="220021012302220020032101"
}
-- </CODE1>

-- <TILES>
-- 001:7777777777777777777777777777777777777777777777777777777777777777
-- 002:ffffffffffffffff7777777777777777ffffffffffffffff7777777777777777
-- 003:3333333333333333333333333333333333333333333333333333333333333333
-- 004:3333333333333333333333333333333333333333333333333333333300000000
-- 005:3333333033333330333333073333330733333077333330773333077733330777
-- 006:7777777077777770777777037777770377777033777770337777033377770333
-- 007:4444444444111144441111444444444411141114111411144444444411111111
-- 008:1444444114444441144444131444441314444133144441331444133314441333
-- 009:1444444414111144141111441444444411141114111411141444444411111111
-- 011:000000000000000000000000000000000000000500000ffb0000bfbb000bfbbf
-- 012:00000000000000000000000000000000b500000055500000fb5bb0005b555000
-- 016:777777777777777f7777777777777777777777ff77777fff7777777777777777
-- 017:fff77777ff7777777777777777777777f7777777777777777777777777777777
-- 018:7777777777222777722222777202027772222277772227777777777777777777
-- 019:7777777077777770777777037777770377777033777770337777033377770000
-- 020:3330777733307777330777773307777730777777307777770777777707777777
-- 021:7770333377703333770333337703333370333333703333330333333303333333
-- 022:1444444414444444144444441444444414444444144444441444444414444444
-- 023:1441333314413333141333331413333311333333113333331333333313333333
-- 024:1444444414444444144444441444444414444444144444441444444414444444
-- 025:1444444414444444144444441444444414444444144444441444444414444444
-- 027:00fffee50b55ebfb05feff550bb5b55b0e5ffe5b00be55b50002255b00002222
-- 028:bbb52500555555005b525250b525255055522500b52552002555200022210000
-- 032:7777ffff777fffff777777777777777777ffffff7fffffff7777777777777777
-- 033:fffffff7ffffff777777777777777777fffff777ffff77777777777777777777
-- 034:4444444444444444444444440000000002222220022222200222222002222220
-- 035:0222222000000030022222200222222002222220022222200222222001111110
-- 036:4441333344413333441333334413333341333333413333331333333313333333
-- 037:4444444444444444444444444444444444444444444444444444444444444444
-- 038:4444444444444444444444444444444444444444444444444444444411111111
-- 043:0000040100000094000000040000000900000009000000090000000900000009
-- 044:0110000044000000400000004000000040000000400000004000000040000000
-- 048:111111111441e5e114441114114dd4441e1d4444151444441e14444211444423
-- 049:1111111244442311444231314423132142313231231324313132443113244131
-- 050:1234567089abcdef000000000000000000000000000000000000000000000000
-- 059:0000000900000000000000000000000000000000000000000000000000000000
-- 060:4000000000000000000000000000000000000000000000000000000000000000
-- 064:1444423114442313144231321423132412313244131324411132333321111111
-- 065:32441e3124441531444d1e3144dd413111144431e5e144313333333111111111
-- 080:000ee00000eeeee00eeeee000ec2c20000cccc0000446400000c400000200200
-- 081:000ee00000eeeee00eeeee000ec2c20000cccc000044640000c44c0000022000
-- 082:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000200200
-- 083:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000202000
-- 084:000ee00000eeeee00eeeee000ec2c20000cccc00004c64c00004400000202000
-- 085:000ee00000eeeee00eeeee000ec2c20000cccc0000c4644c0004400000202000
-- 086:000ee00000eeeee00eeeee000ec2c20000cccc00004c60000004444200002000
-- 087:000ee00000eeeee00eeeee000ecc2c0000cccc00004c6c000004400000022000
-- 088:000ee00000eeeee00eeeee000eccc20000cccc0c004444400004400000202000
-- 089:000ee00000eeeee00eeeee000ec2c20000cccc00004c6c000004400000020200
-- 096:0333330003292000039990006666660096666900906609000044000000220000
-- 097:0333330003292000039990006666660096666900996609900444000020002000
-- 098:0333330003292000039990006666660096666900996609900044000000220000
-- 099:0333330003292000039990006666660096666900996609900444400020000200
-- 100:0333330003292000039990000666660009666900099609900444400020002000
-- 101:0333330003292000039990006666660096666999996600000444400020002000
-- 102:0333330003292000039990006666660096666900906690000044442000020000
-- 103:0333330003292000039990006666660096666900090660900004400000020200
-- 104:0000000000000000000000000000000030000000329660003996694239969942
-- 105:000000000000000000000000000000000e0000000ee2c000eeecc4000eeccc42
-- 112:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400002002000
-- 113:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020002000
-- 114:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400000220000
-- 115:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020000200
-- 116:033330003c2c20000cccc00005e5e5000c5e5c000cc55cc00444400002002000
-- 117:033330003c2c20000cccc00055e5e500c55e5ccccc5550000444400002002000
-- 118:0033330003c2c20000cccc00055e5e500c55e5c0c5555cc00444400020002000
-- 119:033330003c2c20000cccc00055e5e500c55e5c000c5555c00044440000020020
-- 120:000000000000000000000000000000000000000032c5e5003cce55403cc5cc42
-- </TILES>

-- <SPRITES>
-- 000:000ee00000eeeee00eeeee000ec2c20000cccc0000446400000c400000200200
-- 001:000ee00000eeeee00eeeee000ec2c20000cccc000044640000c44c0000022000
-- 002:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000200200
-- 003:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000202000
-- 004:000ee00000eeeee00eeeee000ec2c20000cccc00004c64c00004400000202000
-- 005:000ee00000eeeee00eeeee000ec2c20000cccc0000c4644c0004400000202000
-- 006:000ee00000eeeee00eeeee000ec2c20000cccc00004c60000004444200002000
-- 007:000ee00000eeeee00eeeee000ecc2c0000cccc00004c6c000004400000022000
-- 008:000ee00000eeeee00eeeee000eccc20000cccc0c004444400004400000202000
-- 009:000ee00000eeeee00eeeee000ec2c20000cccc00004c6c000004400000020200
-- 016:0333330003292000039990006666660096666900906609000044000000220000
-- 017:0333330003292000039990006666660096666900996609900444000020002000
-- 018:0333330003292000039990006666660096666900996609900044000000220000
-- 019:0333330003292000039990006666660096666900996609900444400020000200
-- 020:0333330003292000039990000666660009666900099609900444400020002000
-- 021:0333330003292000039990006666660096666999996600000444400020002000
-- 022:0333330003292000039990006666660096666900906690000044442000020000
-- 023:0333330003292000039990006666660096666900090660900004400000020200
-- 024:0000000000000000000000000000000030000000329660003996694239969942
-- 025:000000000000000000000000000000000e0000000ee2c000eeecc4000eeccc42
-- 032:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400002002000
-- 033:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020002000
-- 034:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400000220000
-- 035:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020000200
-- 036:033330003c2c20000cccc00005e5e5000c5e5c000cc55cc00444400002002000
-- 037:033330003c2c20000cccc00055e5e500c55e5ccccc5550000444400002002000
-- 038:0033330003c2c20000cccc00055e5e500c55e5c0c5555cc00444400020002000
-- 039:033330003c2c20000cccc00055e5e500c55e5c000c5555c00044440000020020
-- 040:000000000000000000000000000000000000000032c5e5003cce55403cc5cc42
-- 064:8888888888888888888888888888888088888880888888808888880088888000
-- 065:8888888888888888888888888888888808888888008888880000888800088888
-- 066:88000888800000080000008880a0a08888aaaa8888000888880a888880880888
-- 067:8888888888888888888888888888888888888888888888888888888888888888
-- 080:8888880a8888888a88aaa880888aaff088aaa808888888888888888888888888
-- 081:0a088888aaa8888800888888afafff8880888888888888888888888888888888
-- 082:8888888888888888888888888888888888888888888888888888888888888888
-- 083:8888888888888888888888888888888888888888888888888888888888888888
-- 096:88800888880000088000008880a0a08888aaaa88880000888880088888888888
-- 097:88888888888080888800008880adad0888aaaa88880000888880088888888888
-- 098:808888888800008880aaaa0880aadd0880aaaa08880000888880088888888888
-- 099:880808888800008880000008800dad0888aaaa88880000888880088888888888
-- 100:88800888880000088000008880a0a08888aaaa88880000888880088888888888
-- 101:88888888888080888800008880adad0888aaaa88880000888880088888888888
-- 102:808888888800008880aaaa0880aadd0880aaaa08880000888880088888888888
-- 103:880808888800008880000008800dad0888aaaa88880000888880088888888888
-- 112:8880088888000008800000888000008888aaaa88880000888880088888888888
-- 113:888008888800000880000088800aa08888aaaa88880000888880088888888888
-- 116:8880088888000008800000888000008888aaaa88880000888880088888888888
-- 117:888008888800000880000088800aa08888aaaa88880000888880088888888888
-- 144:800008880adda8888aaaa888ffffff88affffa88a0000a888800888888888888
-- 145:800008880aa0a8888aaaa888ffffff88affffa00a0000aa88000088808808888
-- 146:888888888808880880a000a080afafa0880aaa08888000888888888888888888
-- 147:88888888888888888800000880afafa080aaaaa080a000a08808880888888888
-- 148:800008880adda8888aaaa888ffffff88affffa88a0000a888800888888888888
-- 149:800008880aa0a8888aaaa888ffffff88affffa00a0000aa88000088808808888
-- 150:888888888808880880a000a080afafa0880aaa08888000888888888888888888
-- 151:88888888888888888800000880afafa080aaaaa080a000a08808880888888888
-- 192:000ee00000eeeee00eeeee000ec2c20000cccc0000446400000c400000200200
-- 193:000ee00000eeeee00eeeee000ec2c20000cccc000044640000c44c0000022000
-- 194:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000200200
-- 195:000ee00000eeeee00eeeee000ec2c20000cccc00004464000c0440c000202000
-- 196:000ee00000eeeee00eeeee000ec2c20000cccc00004c64c00004400000202000
-- 197:000ee00000eeeee00eeeee000ec2c20000cccc0000c4644c0004400000202000
-- 198:000ee00000eeeee00eeeee000ec2c20000cccc00004c60000004444200002000
-- 199:000ee00000eeeee00eeeee000ecc2c0000cccc00004c6c000004400000022000
-- 200:000ee00000eeeee00eeeee000eccc20000cccc0c004444400004400000202000
-- 201:000ee00000eeeee00eeeee000ec2c20000cccc00004c6c000004400000020200
-- 208:0333330003292000039990006666660096666900906609000044000000220000
-- 209:0333330003292000039990006666660096666900996609900444000020002000
-- 210:0333330003292000039990006666660096666900996609900044000000220000
-- 211:0333330003292000039990006666660096666900996609900444400020000200
-- 212:0333330003292000039990000666660009666900099609900444400020002000
-- 213:0333330003292000039990006666660096666999996600000444400020002000
-- 214:0333330003292000039990006666660096666900906690000044442000020000
-- 215:0333330003292000039990006666660096666900090660900004400000020200
-- 216:0000000000000000000000000000000030000000329660003996694239969942
-- 217:000000000000000000000000000000000e0000000ee2c000eeecc4000eeccc42
-- 224:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400002002000
-- 225:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020002000
-- 226:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400000220000
-- 227:033330003c2c20000cccc00055e5e500c55e5c00c5555c000444400020000200
-- 228:033330003c2c20000cccc00005e5e5000c5e5c000cc55cc00444400002002000
-- 229:033330003c2c20000cccc00055e5e500c55e5ccccc5550000444400002002000
-- 230:0033330003c2c20000cccc00055e5e500c55e5c0c5555cc00444400020002000
-- 231:033330003c2c20000cccc00055e5e500c55e5c000c5555c00044440000020020
-- 232:000000000000000000000000000000000000000032c5e5003cce55403cc5cc42
-- </SPRITES>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <PALETTE>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE>

-- <PALETTE1>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE1>

-- <PALETTE2>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE2>

-- <PALETTE3>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE3>

-- <PALETTE4>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE4>

-- <PALETTE5>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE5>

-- <PALETTE6>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE6>

-- <PALETTE7>
-- 000:0000007e25531d2b535f574fab5236008751ff004d83769cff77a8ffa300c2c3c700e756ffccaa29adfffff024fff1e8
-- </PALETTE7>

